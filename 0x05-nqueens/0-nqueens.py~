#!/usr/bin/python3
"""
   The N queens puzzle is the challenge of placing N 
    non-attacking queens on an NÃ—N chessboard. Write 
    a program that solves the N queens problem.
"""


import sys

def is_safe(board, row, col):
    """ Check if a queen can be placed at the given position
        without attacking any other queens
    """

    # Check row on the left side
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check upper diagonal on the left side
    i, j = row, col
    while i >= 0 and j >= 0:
        if board[i][j] == 1:
            return False
        i -= 1
        j -= 1

    # Check lower diagonal on the left side
    i, j = row, col
    while i < N and j >= 0:
        if board[i][j] == 1:
            return False
        i += 1
        j -= 1

    return True

def solve_nqueens(board, col):
    """
       Recursive function to solve the N queens problem
    """

    # Base case: If all queens are placed, print the solution
    if col >= N:
        solution = []
        for i in range(N):
            row = []
            for j in range(N):
                row.append(board[i][j])
            solution.append(row)
        solutions.append(solution)
        return

    # Try placing a queen in each row of the current column
    for i in range(N):
        if is_safe(board, i, col):
            board[i][col] = 1
            solve_nqueens(board, col + 1)
            board[i][col] = 0

def print_solutions(solutions):
    """ 
       Print the solutions in the required format
    """
    for solution in solutions:
        for row in solution:
            print(''.join(map(str, row)))
        print()

if __name__ == "__main__":
    """
       Check the command-line arguments
    """
    if len(sys.argv) != 2:
        print("Usage: nqueens N")
        sys.exit(1)

    try:
        N = int(sys.argv[1])
    except ValueError:
        print("N must be a number")
        sys.exit(1)

    if N < 4:
        print("N must be at least 4")
        sys.exit(1)

    # Initialize an empty chessboard
    board = [[0] * N for _ in range(N)]

    solutions = []
    solve_nqueens(board, 0)

    print_solutions(solutions)
